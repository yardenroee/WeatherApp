{"ast":null,"code":"import _slicedToArray from \"/Users/yardennegri/Desktop/weather-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/yardennegri/Desktop/weather-app/src/store.js\";\nimport React from 'react';\nexport const CTX = React.createContext();\n\nfunction reducer(state, action) {\n  const _action$payload = action.payload,\n        name = _action$payload.name,\n        weather = _action$payload.weather,\n        main = _action$payload.main;\n\n  switch (action.type) {\n    case \"RECEIVE_LOCATION\":\n      return {\n        name,\n        weather,\n        main\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst initialState = {\n  name: '',\n  weather: [{\n    main: '',\n    icon: ''\n  }],\n  main: {\n    temp: '',\n    temp_max: '',\n    temp_min: ''\n  }\n};\nlet defaultCity;\nexport default function Store(props) {\n  if (!defaultCity) {\n    fetch(\"https://api.openweathermap.org/data/2.5/weather?zip=10022,us&units=imperial&appid=a673f727f21560d303446f34d91487b1\").then(res => {\n      return res.json();\n    }).then(res => {\n      dispatch({\n        type: \"RECEIVE_LOCATION\",\n        payload: res\n      });\n    });\n    defaultCity = true;\n  }\n\n  const _React$useReducer = React.useReducer(reducer, initialState),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        weatherInfo = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  const fetchData = function (value) {\n    fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(value, \"&units=imperial&appid=a673f727f21560d303446f34d91487b1\")).then(res => {\n      return res.json();\n    }).then(res => {\n      dispatch({\n        type: \"RECEIVE_LOCATION\",\n        payload: res\n      });\n    }, error => {\n      dispatch({\n        type: \"RECEIVE_LOCATION\",\n        payload: initialState\n      });\n    });\n  };\n\n  return React.createElement(CTX.Provider, {\n    value: {\n      fetchData,\n      weatherInfo\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, props.children);\n}","map":{"version":3,"sources":["/Users/yardennegri/Desktop/weather-app/src/store.js"],"names":["React","CTX","createContext","reducer","state","action","payload","name","weather","main","type","initialState","icon","temp","temp_max","temp_min","defaultCity","Store","props","fetch","then","res","json","dispatch","useReducer","weatherInfo","fetchData","value","error","children"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,GAAG,GAAGD,KAAK,CAACE,aAAN,EAAZ;;AAGP,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAAA,0BAEIA,MAAM,CAACC,OAFX;AAAA,QAEpBC,IAFoB,mBAEpBA,IAFoB;AAAA,QAEdC,OAFc,mBAEdA,OAFc;AAAA,QAELC,IAFK,mBAELA,IAFK;;AAG5B,UAAQJ,MAAM,CAACK,IAAf;AACI,SAAK,kBAAL;AACI,aAAQ;AACJH,QAAAA,IADI;AAEJC,QAAAA,OAFI;AAGJC,QAAAA;AAHI,OAAR;;AAMJ;AACI,aAAOL,KAAP;AATR;AAWH;;AAED,MAAMO,YAAY,GAAG;AACjBJ,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,OAAO,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAE,EAAP;AAAWG,IAAAA,IAAI,EAAE;AAAjB,GAAD,CAFQ;AAGjBH,EAAAA,IAAI,EAAE;AAACI,IAAAA,IAAI,EAAC,EAAN;AAAUC,IAAAA,QAAQ,EAAC,EAAnB;AAAuBC,IAAAA,QAAQ,EAAE;AAAjC;AAHW,CAArB;AAOA,IAAIC,WAAJ;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAEjC,MAAI,CAACF,WAAL,EAAkB;AACdG,IAAAA,KAAK,sHAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,KAHL,EAGOF,IAHP,CAGYC,GAAG,IAAI;AACXE,MAAAA,QAAQ,CAAC;AAAEb,QAAAA,IAAI,EAAE,kBAAR;AAA4BJ,QAAAA,OAAO,EAAEe;AAArC,OAAD,CAAR;AACH,KALL;AAMAL,IAAAA,WAAW,GAAG,IAAd;AACH;;AAVgC,4BAYDhB,KAAK,CAACwB,UAAN,CAAiBrB,OAAjB,EAA0BQ,YAA1B,CAZC;AAAA;AAAA,QAY1Bc,WAZ0B;AAAA,QAYbF,QAZa;;AAcjC,QAAMG,SAAS,GAAG,UAAUC,KAAV,EAAiB;AAC/BR,IAAAA,KAAK,6DAAsDQ,KAAtD,4DAAL,CACKP,IADL,CACUC,GAAG,IAAI;AACT,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,KAHL,EAGOF,IAHP,CAGYC,GAAG,IAAI;AACXE,MAAAA,QAAQ,CAAC;AAAEb,QAAAA,IAAI,EAAE,kBAAR;AAA4BJ,QAAAA,OAAO,EAAEe;AAArC,OAAD,CAAR;AACH,KALL,EAKQO,KAAD,IAAW;AACVL,MAAAA,QAAQ,CAAC;AAACb,QAAAA,IAAI,EAAE,kBAAP;AAA2BJ,QAAAA,OAAO,EAAEK;AAApC,OAAD,CAAR;AACH,KAPL;AASH,GAVD;;AAWA,SACI,oBAAC,GAAD,CAAK,QAAL;AAAc,IAAA,KAAK,EAAE;AAAEe,MAAAA,SAAF;AAAaD,MAAAA;AAAb,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,KAAK,CAACW,QADX,CADJ;AAKH","sourcesContent":["import React from 'react';\n\nexport const CTX = React.createContext();\n\n\nfunction reducer(state, action) {\n\n    const { name, weather, main } = action.payload;\n    switch (action.type) {\n        case \"RECEIVE_LOCATION\":\n            return ({\n                name,\n                weather,\n                main,\n            });\n\n        default:\n            return state;\n    }\n}\n\nconst initialState = {\n    name: '',\n    weather: [{main: '', icon: ''}],\n    main: {temp:'', temp_max:'', temp_min: ''},\n};\n\n\nlet defaultCity;\n\nexport default function Store(props) {\n\n    if (!defaultCity) {\n        fetch(`https://api.openweathermap.org/data/2.5/weather?zip=10022,us&units=imperial&appid=a673f727f21560d303446f34d91487b1`)\n            .then(res => {\n                return res.json();\n            }).then(res => {\n                dispatch({ type: \"RECEIVE_LOCATION\", payload: res });\n            });\n        defaultCity = true;\n    }\n\n    const [weatherInfo, dispatch] = React.useReducer(reducer, initialState);\n\n    const fetchData = function (value) {\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${value}&units=imperial&appid=a673f727f21560d303446f34d91487b1`)\n            .then(res => {\n                return res.json();\n            }).then(res => {\n                dispatch({ type: \"RECEIVE_LOCATION\", payload: res });\n            }, (error) => {\n                dispatch({type: \"RECEIVE_LOCATION\", payload: initialState});\n            }\n            );\n    };\n    return (\n        <CTX.Provider value={{ fetchData, weatherInfo }}>\n            {props.children}\n        </CTX.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}